%% Test TDLOGLIKELIHOOD function
%

%% Set initial parameters

T=.05;          % sampling time [ps]
N=256;          % number of sampled points
M=10;            % number of traces to compare
SNR=2e3;        % signal to noise ratio
w=0.2;          % pulse width [ps]
tc=N*T/3;       % pulse center [ps]

% Generate ideal time-domain pulse and pulse derivative
t=T*(0:N-1);
t=t(:);

xfun = @(t,t0,w) (1-2*((t-t0)/w).^2).*exp(-((t-t0)/w).^2);

%% Generate noisy pulse set
Noise.add = 1/SNR;
Noise.mult = 10/SNR;
Noise.time = 10*T/SNR;
Drift.mult = 0.1;
Drift.time = T;
rng('default')

x = zeros(N,M);
eps_alpha = Noise.add*randn(N,M);
eps_beta = Noise.mult*randn(N,M);
eps_tau = Noise.time*randn(N,M);
A = [1; Drift.mult*randn(M-1,1)];
eta = [0; Drift.time*randn(M-1,1)];
for mm = 1:M
    x(:,mm) = A(mm)*xfun(t + eps_tau(:,mm) + eta(mm), tc, w);
end
xn = x + eps_alpha + abs(x).*eps_beta;

%% Define prior distribution
LogVAlphaPriorMean = -15;
LogVAlphaPriorSigma = 15;
LogVBetaPriorMean = -15;
LogVBetaPriorSigma = 15;
LogVTauPriorMean = -15;
LogVTauPriorSigma = 15;
MuPriorMean = mean(xn, 2);
MuPriorSigma = 10*std(xn, 0, 2);
LogAPriorMean = zeros(M-1,1);
LogAPriorSigma = 2*ones(M-1,1);
EtaPriorMean = zeros(M-1,1);
EtaPriorSigma = T*ones(M-1,1);

%% Compute negative-log likelihood cost function and its gradient
P = zeros(3+N+2*(M-1),1);
P(1:3) = log([Noise.add;Noise.mult;Noise.time].^2);
P(3 + (1:N)) = xfun(t,tc,w);
P(3 + N + (1:M-1)) = log(1 + 0.1*randn(M-1,1));
P(3 + N + M - 1 + (1:M-1)) = 0.1*T*randn(M-1,1);

[logpdf,gradlogpdf] = tdlogposterior(P, xn, T, ...
    LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
    LogVBetaPriorMean, LogVBetaPriorSigma, ...
    LogVTauPriorMean, LogVTauPriorSigma, ...
    MuPriorMean, MuPriorSigma, ...
    LogAPriorMean, LogAPriorSigma, ...
    EtaPriorMean, EtaPriorSigma);

%% Compute gradient numerically
delta = 1e-6;
gradnum = zeros(size(P));
for ii=1:3
    Pp = P;
    Pp(ii) = P(ii) + delta;
    Pm = P;
    Pm(ii) = P(ii) - delta;
    gradnum(ii) = (tdlogposterior(Pp, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma) ...
        - tdlogposterior(Pm, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma))/(2*delta);
end
for ii=1:N
    Pp = P;
    Pp(3 + ii) = P(3 + ii) + delta;
    Pm = P;
    Pm(3 + ii) = P(3 + ii) - delta;
    gradnum(3 + ii) = (tdlogposterior(Pp, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma) ...
        - tdlogposterior(Pm, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma))/(2*delta);
end
for m=1:M-1
    Pp = P;
    Pp(3 + N + m) = P(3 + N + m) + delta;
    Pm = P;
    Pm(3 + N + m) = P(3 + N + m) - delta;
    gradnum(3 + N + m) = (tdlogposterior(Pp, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma) ...
        - tdlogposterior(Pm, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma))/(2*delta);
end
for m=1:M-1
    Pp = P;
    Pp(3 + N + M - 1 + m) = P(3 + N + M - 1 + m) + delta;
    Pm = P;
    Pm(3 + N + M - 1 + m) = P(3 + N + M - 1 + m) - delta;
    gradnum(3 + N + M - 1 + m) = (tdlogposterior(Pp, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma) ...
        - tdlogposterior(Pm, xn, T, ...
        LogVAlphaPriorMean, LogVAlphaPriorSigma, ...
        LogVBetaPriorMean, LogVBetaPriorSigma, ...
        LogVTauPriorMean, LogVTauPriorSigma, ...
        MuPriorMean, MuPriorSigma, ...
        LogAPriorMean, LogAPriorSigma, ...
        EtaPriorMean, EtaPriorSigma))/(2*delta);
end

disp('Value of loglik:')
disp(logpdf)

vRange = 1:3;
disp('Gradient with respect to variance parameters:')
disp([gradlogpdf(vRange), gradnum(vRange)])

disp('Norm of differences wrt logv:')
disp(norm(gradlogpdf(vRange)-gradnum(vRange))/...
    norm(gradlogpdf(vRange)+gradnum(vRange)))

muRange = 3 + (1:N);
plot(t, gradlogpdf(muRange), '-', t, gradnum(muRange), '--')
xlabel('t (ps)')
ylabel('\nabla_\muC')
title('Gradient with respect to signal vector')

disp('Norm of differences wrt mu:')
disp(norm(gradlogpdf(muRange) - gradnum(muRange))/...
    norm(gradlogpdf(muRange) + gradnum(muRange)))

ARange = 3 + N + (1:M-1);
disp('Gradient with respect to amplitudes:')
disp([gradlogpdf(ARange), gradnum(ARange)])

disp('Norm of differences wrt logA:')
disp(norm(gradlogpdf(ARange) - gradnum(ARange))/...
    norm(gradlogpdf(ARange) + gradnum(ARange)))

etaRange = 3 + N + M - 1 + (1:M-1);
disp('Gradient with respect to delays:')
disp([gradlogpdf(etaRange), gradnum(etaRange)])

disp('Norm of differences wrt eta:')
disp(norm(gradlogpdf(etaRange) - gradnum(etaRange))/...
    norm(gradlogpdf(etaRange) + gradnum(etaRange)))
