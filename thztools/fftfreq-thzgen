#This is a combination of the thzgen and fftfreq code since thzgen depends on the frequency vector that fftfreq generates
#
#
#


import numpy as np
import math 

N = 11     #number of samples
ts = .05   #sampling time
fs = 1/(ts*N)   #sampling frequency

def fftfreq(N,ts):
  x = np.arange(N+1)  #creates a matrix N+1 length
  xsub = x - math.ceil(N/2)  #subtracts N/2 rounded up from all values in x
  kcirc = np.roll(xsub,(math.floor(N/2)+1))   #this shifts the zero frequency to first positioon
  f = kcirc*fs  #creates the frequency vector
  fp = np.transpose(f)  #turns it into a N x 1 matrix
  
  return fp


#thzgen portion code 


A = 1 
taur = 0.3 
tauc = 0.1 
taul = 0.05/math.sqrt(2*math.log(2))
print(A,taur,tauc,taul)
 
f = fftfreq(N,ts) #calls fftfreq
w = 2*math.pi*f   #converts f to angular frequnecy vector
 
 
#Computing L
Lsq = np.square(w*taul*-1)  #(-(w*taul).^2/2)
L = np.exp(Lsq/2)/math.sqrt(2*math.pi*(taul**2))  #equiv to L = exp(-(w*taul).^2/2)/sqrt(2*pi*taul^2)
 
#computing R

rp = 1/w
print(rp)
 

#computing S
