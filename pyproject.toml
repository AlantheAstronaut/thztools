[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "thztools"
dynamic = ["version"]
description = "Data analysis tools for terahertz time-domain spectroscopy (THz-TDS)"
readme = "README.md"
license = "MIT"
keywords = ["terahertz", "THz", "time-domain spectroscopy", "data analysis"]
authors = [
    { name="Steve Dodge", email="jsdodge@sfu.ca" },
    { name="Santiago Higuera Quintero", email="s.higuera@uniandes.edu.co" },
    { name="Jonathan Posada", email="jonathan.posada1@udea.edu.co" },
]
maintainers = [
    { name="Steve Dodge", email="jsdodge@sfu.ca" },
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering",
]
dependencies = [
    "jupyter",
    "matplotlib",
    "pandas",
    "scipy",
]

[project.urls]
Documentation = "https://pages.github.com/dodge-research-group/thztools"
Issues = "https://github.com/dodge-research-group/thztools/issues"
Source = "https://github.com/dodge-research-group/thztools"

[tool.hatch.version]
path = "thztools/__about__.py"

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest",
    "h5py",
]
[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.7", "3.8", "3.9", "3.10", "3.11"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black>=23.1.0",
    "black[jupyter]",
    "mypy>=1.0.0",
    "numpy>=1.22",
    "ruff>=0.0.243",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/package_demo_jsd tests}"
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}",
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.black]
target-version = ["py37"]
line-length = 79
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 79
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105", "S106", "S107",
    # Ignore complexity
    "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
    # Allow print statements
    "T201"
]
unfixable = [
    # Don't touch unused imports
    "F401",
]

[tool.ruff.isort]
known-first-party = ["package_demo_jsd"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]

[tool.coverage.run]
source_pkgs = ["package_demo_jsd", "tests"]
branch = true
parallel = true
omit = [
    "src/package_demo_jsd/__about__.py",
]

[tool.coverage.paths]
package_demo_jsd = ["src/package_demo_jsd", "*/package-demo-jsd/src/package_demo_jsd"]
tests = ["tests", "*/package-demo-jsd/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.hatch.envs.docs]
dependencies = [
    "sphinx",
    "pydata-sphinx-theme",
]
[tool.hatch.envs.docs.scripts]
build = "sphinx-build -b html docs/source docs/build/html"

[tool.mypy]
plugins = "numpy.typing.mypy_plugin"

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/examples",
    "/matlab",
    "/tests",
]

[tool.hatch.build.targets.wheel]
packages = ["src/thztools"]
